Stats:

bundle.js size
W/o gzip = 876KB
W gzip = 186KB

W/o dynamic import = no diff
W dynamic import = no diff

1. Gzipping text files

var compression = require("compression");
app.use(compression());

2. Preconnect to third-party origins

<link rel="preconnect" href="https://img01-olxua.akamaized.net">

3. Split code for each route into different chunks

- npm i babel-plugin-syntax-dynamic-import         => in package.json
- "plugins": ["syntax-dynamic-import"]             => in .babelrc
- Dynamic import in routes
{path: '/custom',
 component: () => import('./components/pages/layoutTwo.vue')}
 - Result:
 bundle.js + chunk for each route
 each chunk is loaded only when going to that route

4. Split shared dependencies
new webpack.optimize.CommonsChunkPlugin({
    name: 'common',
    filename: 'commons.js'
})

5. Extract css
const ExtractTextPlugin = require("extract-text-webpack-plugin");

plugins: [
new ExtractTextPlugin("style.css")
]

module: {
  rules: [
    {
    test: /\.vue$/,
    loader: 'vue-loader',
    options: {
      extractCSS: true
     }
    }
  ]
}

6. SourceMaps
Comment module.exports.devtool = "" in
if (process.env.NODE_ENV === 'production')
section

7. If commit saved in detached state:
git reflog        => copy commit sha
checkout existing branch
git cherry-pick commit_sha    => imports commit into existing branch

8. Git pull vs git rebase
git pull origin master        => creates merging commit
git pull --rebase origin master  => merges branch into local naster w/o commit
next step is to merge fresh master into current branch:
git merge master              => this creates merging commit
git rebase master             => this merges master into our branch w/o creating merging commit
git cherry -v master             => how many commits ahead of master in separate branch

9. Media queries
Extract media css into separate css files

maxh669-minw640.css
#main_container {
  background-color: red;
}

Add links to index.html

<link rel="stylesheet" media="all" href="stylesheets/main.css">
  <link rel="stylesheet" media="screen and (max-height: 669px), (max-width: 640px)" href="stylesheets/maxh669-minw640.css">
  <link rel="stylesheet" media="screen and (min-width: 641px) and (max-width: 799px) and (min-height: 670px)" href="stylesheets/minw641-maxw799-minh670.css">
  <link rel="stylesheet" media="screen and (min-width: 800px) and (min-height: 670px)" href="stylesheets/minw800-minh670.css">

Browser will download unneeded media css files with low priority

10. Network tab - right-click to add Protocol and Priority

h2 = http2

Http2 advantages:
Multiplexing:
multiple requests per TCP connection = browser requests all assets in paralel
Server push:
server pushes assets to browser before it requests them (css, js, images) which reduces number of requests and speeds up page load
Stream priority:
Browser can request html to render it before applying css and js
Header compression. => npm Hpack.js

HTTPS doesn't mean content is served over HTTP 2
HTTP 2 requires HTTPS, otherwise will not be served

= * =
NOT WORKING IN EXPRESS APP
Enabling http2 on express:
  const http2 = require('http2');
  const options = {
    key: fs.readFileSync('server.key'),
    cert: fs.readFileSync('server.cert')
  };

  const server = http2.createSecureServer(options, (req, res) => {
     res.end('Hello World!');
  });
  server.listen(3000);
  = * =

  Enabling https server:
  var https = require('https');
  const options = {
    key: fs.readFileSync('server.key'),
    cert: fs.readFileSync('server.cert')
  }
  var server = https.createServer(options, app);

Self-assign SSL certificate
1. type openssl in shell to check if it's installed
2. openssl req -nodes -new -x509 -keyout server.key -out server.cert
3. Common Name: localhost
4. It generates 2 files:
server.cert & server.key

Content reachable at https://localhost:3000
Third-party content cannot be handed over http, only https
To allow browser decide protocol => const baseUrl = "//demo4452328.mockable.io/properties";

http1
24 requests
1.4mb transferred
finish 1.48s
DOMContentLoaded 487ms
Load 532 ms

Http2


Cache-control
